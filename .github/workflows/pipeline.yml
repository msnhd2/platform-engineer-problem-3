name: Challenge-SRE-CICD
on:
  pull_request:
    branches: [ main ]

  push:
    branches: 
      - '*'

jobs:
  run-cicd:
    runs-on: ubuntu-20.04
    name: run-cicd
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Install Dependencies
        run: mvn clean install
  
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Create ECR
        run: if $(aws ecr describe-images --repository-name java-api) ; then echo ECR Exist; else aws ecr create-repository --repository-name java-api --region us-east-1; fi

      # - name: Execute Lint
      #   run: make lint

      # - name: Run unit test
      #   run: make unit-test

      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - uses: int128/deploy-lambda-action@v1
      #   with:
      #     function-name: my-function
      #     image-uri: ${{ steps.metadata.outputs.tags }}
      #     alias-name: ${{ steps.metadata.outputs.version }}  